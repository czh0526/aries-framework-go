// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/czh0526/aries-framework-go/pkg/didcomm/common/service (interfaces: Messenger,MessengerHandler)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	service "github.com/czh0526/aries-framework-go/pkg/didcomm/common/service"
	gomock "github.com/golang/mock/gomock"
)

// MockMessenger is a mock of Messenger interface.
type MockMessenger struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerMockRecorder
}

// MockMessengerMockRecorder is the mock recorder for MockMessenger.
type MockMessengerMockRecorder struct {
	mock *MockMessenger
}

// NewMockMessenger creates a new mock instance.
func NewMockMessenger(ctrl *gomock.Controller) *MockMessenger {
	mock := &MockMessenger{ctrl: ctrl}
	mock.recorder = &MockMessengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessenger) EXPECT() *MockMessengerMockRecorder {
	return m.recorder
}

// ReplyTo mocks base method.
func (m *MockMessenger) ReplyTo(arg0 string, arg1 service.DIDCommMsgMap, arg2 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyTo indicates an expected call of ReplyTo.
func (mr *MockMessengerMockRecorder) ReplyTo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTo", reflect.TypeOf((*MockMessenger)(nil).ReplyTo), varargs...)
}

// ReplyToMsg mocks base method.
func (m *MockMessenger) ReplyToMsg(arg0, arg1 service.DIDCommMsgMap, arg2, arg3 string, arg4 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyToMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyToMsg indicates an expected call of ReplyToMsg.
func (mr *MockMessengerMockRecorder) ReplyToMsg(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyToMsg", reflect.TypeOf((*MockMessenger)(nil).ReplyToMsg), varargs...)
}

// Send mocks base method.
func (m *MockMessenger) Send(arg0 service.DIDCommMsgMap, arg1, arg2 string, arg3 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessengerMockRecorder) Send(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessenger)(nil).Send), varargs...)
}

// SendToDestination mocks base method.
func (m *MockMessenger) SendToDestination(arg0 service.DIDCommMsgMap, arg1 string, arg2 *service.Destination, arg3 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendToDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToDestination indicates an expected call of SendToDestination.
func (mr *MockMessengerMockRecorder) SendToDestination(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToDestination", reflect.TypeOf((*MockMessenger)(nil).SendToDestination), varargs...)
}

// MockMessengerHandler is a mock of MessengerHandler interface.
type MockMessengerHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessengerHandlerMockRecorder
}

// MockMessengerHandlerMockRecorder is the mock recorder for MockMessengerHandler.
type MockMessengerHandlerMockRecorder struct {
	mock *MockMessengerHandler
}

// NewMockMessengerHandler creates a new mock instance.
func NewMockMessengerHandler(ctrl *gomock.Controller) *MockMessengerHandler {
	mock := &MockMessengerHandler{ctrl: ctrl}
	mock.recorder = &MockMessengerHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessengerHandler) EXPECT() *MockMessengerHandlerMockRecorder {
	return m.recorder
}

// HandleInbound mocks base method.
func (m *MockMessengerHandler) HandleInbound(arg0 service.DIDCommMsgMap, arg1 service.DIDCommContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleInbound", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleInbound indicates an expected call of HandleInbound.
func (mr *MockMessengerHandlerMockRecorder) HandleInbound(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleInbound", reflect.TypeOf((*MockMessengerHandler)(nil).HandleInbound), arg0, arg1)
}

// ReplyTo mocks base method.
func (m *MockMessengerHandler) ReplyTo(arg0 string, arg1 service.DIDCommMsgMap, arg2 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyTo", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyTo indicates an expected call of ReplyTo.
func (mr *MockMessengerHandlerMockRecorder) ReplyTo(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyTo", reflect.TypeOf((*MockMessengerHandler)(nil).ReplyTo), varargs...)
}

// ReplyToMsg mocks base method.
func (m *MockMessengerHandler) ReplyToMsg(arg0, arg1 service.DIDCommMsgMap, arg2, arg3 string, arg4 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplyToMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplyToMsg indicates an expected call of ReplyToMsg.
func (mr *MockMessengerHandlerMockRecorder) ReplyToMsg(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplyToMsg", reflect.TypeOf((*MockMessengerHandler)(nil).ReplyToMsg), varargs...)
}

// Send mocks base method.
func (m *MockMessengerHandler) Send(arg0 service.DIDCommMsgMap, arg1, arg2 string, arg3 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMessengerHandlerMockRecorder) Send(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessengerHandler)(nil).Send), varargs...)
}

// SendToDestination mocks base method.
func (m *MockMessengerHandler) SendToDestination(arg0 service.DIDCommMsgMap, arg1 string, arg2 *service.Destination, arg3 ...service.Opt) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendToDestination", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendToDestination indicates an expected call of SendToDestination.
func (mr *MockMessengerHandlerMockRecorder) SendToDestination(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendToDestination", reflect.TypeOf((*MockMessengerHandler)(nil).SendToDestination), varargs...)
}
